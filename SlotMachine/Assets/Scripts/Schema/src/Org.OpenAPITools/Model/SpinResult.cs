/*
 * Title
 *
 * Title
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The three spin results from a spin
    /// </summary>
    [DataContract(Name = "SpinResult")]
    public partial class SpinResult : IEquatable<SpinResult>
    {

        /// <summary>
        /// Gets or Sets Spin1
        /// </summary>
        [DataMember(Name = "spin1", EmitDefaultValue = false)]
        public SpinEnum? Spin1 { get; set; }

        /// <summary>
        /// Gets or Sets Spin2
        /// </summary>
        [DataMember(Name = "spin2", EmitDefaultValue = false)]
        public SpinEnum? Spin2 { get; set; }

        /// <summary>
        /// Gets or Sets Spin3
        /// </summary>
        [DataMember(Name = "spin3", EmitDefaultValue = false)]
        public SpinEnum? Spin3 { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SpinResult" /> class.
        /// </summary>
        /// <param name="spin1">spin1.</param>
        /// <param name="spin2">spin2.</param>
        /// <param name="spin3">spin3.</param>
        public SpinResult(SpinEnum? spin1 = default(SpinEnum?), SpinEnum? spin2 = default(SpinEnum?), SpinEnum? spin3 = default(SpinEnum?))
        {
            this.Spin1 = spin1;
            this.Spin2 = spin2;
            this.Spin3 = spin3;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SpinResult {\n");
            sb.Append("  Spin1: ").Append(Spin1).Append("\n");
            sb.Append("  Spin2: ").Append(Spin2).Append("\n");
            sb.Append("  Spin3: ").Append(Spin3).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SpinResult);
        }

        /// <summary>
        /// Returns true if SpinResult instances are equal
        /// </summary>
        /// <param name="input">Instance of SpinResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpinResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Spin1 == input.Spin1 ||
                    this.Spin1.Equals(input.Spin1)
                ) && 
                (
                    this.Spin2 == input.Spin2 ||
                    this.Spin2.Equals(input.Spin2)
                ) && 
                (
                    this.Spin3 == input.Spin3 ||
                    this.Spin3.Equals(input.Spin3)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Spin1.GetHashCode();
                hashCode = (hashCode * 59) + this.Spin2.GetHashCode();
                hashCode = (hashCode * 59) + this.Spin3.GetHashCode();
                return hashCode;
            }
        }

    }

}
